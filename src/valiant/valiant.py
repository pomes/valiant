"""Handles the valiant context."""
from dataclasses import dataclass
from pathlib import Path
from typing import List, Optional

from .__about__ import (
    application_copyright_holder,
    application_copyright_year,
    application_description,
    application_homepage,
    application_licence,
    application_name,
    application_tagline,
    application_title,
    application_vendor,
    application_version,
)
from .config import Config
from .package import PackageMetadata

from .reports import Report, ReportFactory
from valiant.repositories import RepositoryFactory


@dataclass(frozen=True)
class PythonPackagePayload:
    """A payload that collects package information."""

    repository_base_url: str
    package_name: str
    package_version: str
    package_metadata: PackageMetadata
    reports: Optional[List[Report]] = None


class Valiant:
    """Provides general applications details and instance configuration."""

    def __init__(self, config: Config):
        """Fire up a new valiant.

        Args:
            config: The application configuration
        """
        self._config: Config = config
        self._repo_factory = RepositoryFactory()
        self._report_factory = ReportFactory()

    @property
    def application_version(self) -> str:  # noqa: D102
        return application_version

    @property
    def application_name(self) -> str:  # noqa: D102
        return application_name

    @property
    def application_vendor(self) -> str:  # noqa: D102
        return application_vendor

    @property
    def application_title(self) -> str:  # noqa: D102
        return application_title

    @property
    def application_description(self) -> str:  # noqa: D102
        return application_description

    @property
    def application_tagline(self) -> str:  # noqa: D102
        return application_tagline

    @property
    def application_licence(self) -> str:  # noqa: D102
        return application_licence

    @property
    def application_homepage(self) -> str:  # noqa: D102
        return application_homepage

    @property
    def application_copyright_year(self) -> int:  # noqa: D102
        return application_copyright_year

    @property
    def application_copyright_holder(self) -> str:  # noqa: D102
        return application_copyright_holder

    @property
    def cache_dir(self) -> Optional[Path]:
        """Gets the current instance's cache dir.

        Returns:
            A Path object to the cache directory
        """
        return self._config.cache_dir

    @property
    def config_dir(self) -> Optional[Path]:
        """Gets the current instance's config dir.

        Returns:
            A Path object to the config directory
        """
        return self._config.config_dir

    def get_package_metadata(
        self,
        package_name: str,
        package_version: str,
        repository_name: Optional[str] = None,
    ) -> PythonPackagePayload:
        """Gets the metadata for the requested package.

        Args:
            package_name: The package name
            package_version: The package version
            repository_name: The name(key) for the repository to use

        Returns:
            A payload with the package metadata.
        """
        if repository_name:
            repo_config = self._config.get_repository_configuration(repository_name)
        else:
            repo_config = self._config.default_repository_configuration

        repo = self._repo_factory.get_repository(repo_config)
        metadata = repo.show(package_name, package_version)

        return PythonPackagePayload(
            repository_base_url=repo_config.base_url,
            package_name=package_name,
            package_version=package_version,
            package_metadata=metadata,
        )

    def get_package_reports(
        self, payload: PythonPackagePayload
    ) -> PythonPackagePayload:
        """Prepares the reports for the package defined in the payload.

        Args:
            payload: A payload generated by `get_package_metadata`

        Returns:
            A new payload enhanced with reports.
        """
        return None
